:t sequence
sequence Just 5 Just 5
Just 5 <*> Just 5
Just (const 0) <*> Nothing
Just (cons 0) <*> Nothing
Just 0 <$> Nothing
(Just 0) <*> Nothing
Just 0 <*> Nothing
runParser gameId () "err" "Game 1: "
:load 2a
runParser gameId () "err" "Game 1: "
runParser gameId () "err" "Game 1: "
:load 2a
runParser gameId () "err" "Game 1: "
runParser gameId () "err" "Game 1:"
runParser gameId () "err" "Game 1: "
runParser gameId () "err" "Game 1: "
runParser gameId () "err" "Game 1:"
runParser gameId () "err" "Game 1:
runParser game () "err" "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
runParser game () "err" "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green "
runParser set () "err" "3 blue, 4 red; "
runParser color () "err" "3 red; "
runParser color () "err" "3 blue; "
runParser color () "err" "3 blue, "
:load 2a
runParser blue () "err" "blue"
runParser red () "err" "blue"
runParser red () "err" "blue"
runParser red () "err" "red"
:load 2a.hs
load 2a
load 2a.hs
load 2a.hs
load 2a.hs
load 2a.hs
show $ 5<>6
show $ 5<6>
5<>6
runParser parseList () "err" "two1ninenine"
runParser digitAsString () "" "123"
:load 1b.hs
:load 1b.hs
parseNumerical "two1nine"
runParser parseList () "err" "two1nine"
:load 1b.hs
runParser parseList () "err" "two1nine"
runParser parseList () "err" "two1nine"
:load 1b.hs
:load 1b.hs
:load 1b.hs
load 1b.hs
'a' <> 'b'
21 * 5 * 21 * 5 * 21 * 21 * 5 * 21 * 5 * 21
6*21*3*5
6^21
6^21+(4^5)
3^21+(2^5)
3^21*(2^5)
3*(2^5)
3^(2^5)
2^5
3^21
